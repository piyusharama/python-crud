pipeline {
    agent any

    environment {
        REGISTRY = "docker.io"
        IMAGE_NAME = "piyusharama/python-crud"
        IMAGE_TAG = "latest"

        REMOTE_USER = "ubuntu"
        REMOTE_HOST = "your-server-ip"
        APP_DIR     = "/home/ubuntu/python-crud"
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    sh "docker build -t $IMAGE_NAME:$IMAGE_TAG ."
                }
            }
        }

        stage('Login to DockerHub') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'dockerhub-creds', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    sh "echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin"
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                sh "docker push $IMAGE_NAME:$IMAGE_TAG"
            }
        }

        stage('Deploy on Remote Server') {
            steps {
                sshagent (credentials: ['ssh-remote-server']) {
                    sh """
                        ssh -o StrictHostKeyChecking=no $REMOTE_USER@$REMOTE_HOST '
                            mkdir -p $APP_DIR &&
                            cd $APP_DIR &&
                            if [ ! -d .git ]; then
                                git clone https://github.com/piyusharama/python-crud.git $APP_DIR
                            else
                                git pull origin main
                            fi &&
                            echo "Pulling latest image..." &&
                            docker compose pull &&
                            echo "Restarting containers..." &&
                            docker compose down &&
                            docker compose up -d
                        '
                    """
                }
            }
        }

        stage('Cleanup') {
            steps {
                sh "docker rmi $IMAGE_NAME:$IMAGE_TAG || true"
            }
        }
    }
}
